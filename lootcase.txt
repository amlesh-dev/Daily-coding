A thief finds much more loot than his bag can fit. Help him to find the most valuable combination of items assuming that any fraction of a loot item can be put into his bag.

Input Format

The first line of the input contains the number 𝑛 of items and the capacity 𝑊 of a knapsack. The next 𝑛 lines define the values and weights of the items. The 𝑖-th line contains integers 𝑣𝑖 and 𝑤𝑖—the value and the weight of 𝑖-th item, respectively.

Constraints

1 ≤ 𝑛 ≤ 103, 0 ≤ 𝑊 ≤ 2 · 106; 0 ≤ 𝑣𝑖 ≤ 2 · 106, 0 < 𝑤𝑖 ≤ 2 · 106 for all 1 ≤ 𝑖 ≤ 𝑛. All the numbers are integers.

Output Format

Output the maximal value of fractions of items that fit into the knapsack. The absolute value of the difference between the answer of your program and the optimal value should be at most 10−3. To ensure this, output your answer with at least four digits after the decimal point (otherwise your answer, while being computed correctly, can turn out to be wrong because of rounding issues).

Sample Input 0

3 50
60 20
100 50
120 30
Sample Output 0

180.0000
Explanation 0

To achieve the value 180, we take the first item and the third item into the bag.

Sample Input 1

1 10
500 30
Sample Output 1

166.6667
Explanation 1

Here, we just take one third of the only available item.
SOLUTION
#include<bits/stdc++.h>
using namespace std;

struct Item{
    int value;
    int weight;
};

bool comp(const tuple<int,int,double>& a,const tuple<int,int,double>& b)
{
    return (get<2>(a) > get<2>(b));
}

double fractionalKnapsack(int W, Item arr[], int n)
{
    int i;
    vector<tuple<int,int,double>> v;
    for(i=0;i<n;i++)
    {
        double t = (double)((double)arr[i].value/(double)arr[i].weight);
        v.push_back(make_tuple(arr[i].value,arr[i].weight,t));
    }
    
    sort(v.begin(),v.end(),comp);
    double x = 0;
    
    for(i=0;i<n;i++)
    {
        if(W >= get<1>(v[i]))
        {
            W = W - get<1>(v[i]);
            x = x + get<0>(v[i]);
        }
        else
        break;
    }
    if(W > 0 && i < n) 
    {
        x = x + W * (double)get<0>(v[i])/get<1>(v[i]);
    }
    return x;
}

int main()
{
    int n, W;
    cin>>n>>W;
    
    Item arr[n];
    for(int i=0;i<n;i++){
      cin>>arr[i].value>>arr[i].weight;
    }
    cout << fixed << setprecision(4) <<fractionalKnapsack(W, arr, n);
}